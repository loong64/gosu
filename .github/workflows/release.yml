on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch:

name: Checkout and Create Release Version

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      build: ${{ steps.check-build.outputs.build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Version
        id: get-version
        run: |
          version=$(curl -sSL 'https://api.github.com/repos/tianon/gosu/releases/latest' | jq -r ".tag_name")
          echo "Current Version: ${version}"
          if [ -z "${version}" ] || [ "${version}" == "null" ]; then
            echo "Failed to get version"
            exit 1
          fi
          echo "version=${version}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Check Release
        id: check-release
        run: |
          gh release view ${{ env.version }} -R ${{ github.repository }} >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Build
        id: check-build
        run: |
          gh release view ${{ env.version }} -R ${{ github.repository }} | grep gosu-${{ env.version }}-linux-386.tar.gz >/dev/null 2>&1 || echo "build=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Release ${{ env.version }}" || echo "No changes to commit"
          git tag -a "${{ env.version }}" -m "Release ${{ env.version }}" || true
          git push origin "${{ env.version }}" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check-release.outputs.create == 1
        run: |
          gh release create ${{ env.version }} --notes "Release ${{ env.version }}" -R ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: check
    runs-on: ubuntu-latest
    if: needs.check.outputs.build == 1
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
      - name: Check Version
        run: |
          echo "Current Version: ${version}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: tianon/gosu
          ref: ${{ env.version }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Get File
        run: |
          wget -O ../goreleaser.test https://github.com/${{ github.repository }}/raw/refs/heads/master/.goreleaser.yaml

      - name: Build Binary
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --config ../goreleaser.test --skip=publish --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upgrade Release
        run: |
          gh release upload ${{ env.version }} dist/*.tar.gz -R ${{ github.repository }}
          gh release upload ${{ env.version }} dist/*.txt -R ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  binaries:
    needs: check
    runs-on: ubuntu-latest
    if: needs.check.outputs.build == 1
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
      - name: Check Version
        run: |
          echo "Current Version: ${version}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Prepare scripts
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro gnupg-agent
          mkdir -p dist

          echo > ~/.gnupg/gpg-agent.conf <<EOF
          max-cache-ttl 60480000
          default-cache-ttl 60480000
          allow-preset-passphrase
          EOF
          gpg-connect-agent reloadagent /bye

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build Binary
        run: |
          docker buildx build --platform linux/loong64 --build-arg VERSION=${{ env.version }} -t gosu . --load

          cd dist
          rm -f gosu* SHA256SUMS*
          docker run --rm gosu sh -c 'cd /go/bin && tar -c gosu*' | tar -xv
          sha256sum gosu* | tee SHA256SUMS
          file gosu*
          ls -lFh gosu* SHA256SUMS*

          "./gosu-$(dpkg --print-architecture)" --help

      - name: Sign Binary
        run: |
          KEYGRIP=$(gpg -K --with-keygrip | grep Keygrip | head -1 | awk '{print $3}')
          /usr/lib/gnupg2/gpg-preset-passphrase --preset "$KEYGRIP" <<< "${{ secrets.PASSPHRASE }}"

          cd dist
          rm -f gosu*.asc SHA256SUMS.asc
          for f in gosu*; do
            gpg --output "$f.asc" --detach-sign "$f"
          done
          sha256sum gosu* > SHA256SUMS
          gpg --output SHA256SUMS.asc --detach-sign SHA256SUMS
          ls -lFh gosu* SHA256SUMS*

      - name: Upgrade Release
        run: |
          gh release upload ${{ env.version }} dist/* -R ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}